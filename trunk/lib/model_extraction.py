import os
import tarfile

from exceptions import ModelExtractionException

def write_named_pdbs( path, names, dirs, tarballs ):
	try:
		f = open( path, 'w' )
	except Exception as e:
		raise ModelExtractionException( "Failure opening output file: %s" % (e) )

	# cache the full paths of the tarball contents, as well as the filenames
	tarball_pdb_names,tarball_pdb_paths = [],[]
	for t in tarballs:
		tarball_pdb_paths.append( t.getnames() )
		tarball_pdb_names.append( map(os.path.basename, tarball_pdb_paths[-1]) )

	for (i,n) in enumerate(names):
		tmp, pdb = "%s.pdb" % n, None

		for d in dirs:
			path = os.path.join(d,tmp)

			if( os.access( path, os.R_OK ) ):
				if( pdb != None ):
					print "WARNING: duplicate named PDBs (\"%s\") detected!" % (n)
				else:
					try:
						pdb = open(path, 'r').read().strip()
					except Exception as e:
						raise ModelExtractionException( "Could not read PDB at \"%s\"" % (path) )

		for (j,t) in enumerate(tarballs):
			try: # attempt to find the position of the pdb in the tarball
				k = tarball_pdb_names[j].index(tmp)
			except:
				continue

			if( pdb != None ):
				print "WARNING: duplicate named PDBs (\"%s\") detected!" % (n)
			else:
				try:
					member = t.getmember( tarball_pdb_paths[j][k] )
					pdb = t.extractfile(member).read().strip()
				except Exception as e:
					raise ModelExtractionException( "Could not extract PDB \"%s\" from tarball \"%s\"" % (n,t.name) )

		if(pdb == None):
			raise ModelExtractionException( "Could not find pdb \"%s\" in any of the provided resources" % (n) )

		try:
			f.write("MODEL        %d\n%s\nENDMDL\n" % (i+1, pdb ) )
		except Exception as e:
			raise ModelExtractionException( "Could not append PDB to output: %s" % (e) )

	f.close()

def write_model_attributes( path, name, attributes ):
	f = open( path, 'w' )
	f.write("""# generated by make_generation_models
attribute: %s
match mode: 1-to-1
recipient: molecules
""" % name)
	for (i,a) in enumerate(attributes):
		f.write("\t#0.%i\t%.3f\n" % (i+1,a))
	f.close()