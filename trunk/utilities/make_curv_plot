#!/usr/bin/env python

import argparse
import scipy
import matplotlib as mpl

parser = argparse.ArgumentParser(fromfile_prefix_chars='@')

group0 = parser.add_argument_group('Table specification')
group0.add_argument('input', 												help='MESMER restraint output file.')
group0.add_argument('-xCol',	default=1,		metavar='N',	type=int,	help='The column containing the desired component attribute')
group0.add_argument('-yCol',	default=2,		metavar='N',	type=int,	help='The column to use as y-axis data')

group1 = parser.add_argument_group('Plot options')
group1.add_argument('-title',					default='',					help='The title for the output figure')
group1.add_argument('-xLabel',					default='X',				help='Label for the X axis')
group1.add_argument('-yLabel',					default='Y',				help='Label for the Y axis')
group1.add_argument('-backend',					default='Agg',	metavar='Agg',	help='Specify the graphics backend for MPL (only used w/ the -nogui option)')
group1.add_argument('-plotArgs',	nargs=2,	action='append',	default=[],	metavar='',	help='Specify arguments for matplotlib as ARG VALUE')
group1.add_argument('-plotProp',	nargs=2,	action='append',	default=[],	metavar='',	help='Set properties for the figure as ARG VALUE')
group1.add_argument('-figsize',		nargs=2,	default=[6,6],	type=int,	metavar='N',	help='Set figure size and ratio: X Y')

group3 = parser.add_argument_group('Output options')
group3.add_argument('-nogui', 	action='store_true',	default=False,	help='Don\'t display image.')
group3.add_argument('-figure', 					default=None,	help='The file to write the resulting figure to.')

args = parser.parse_args()

if(args.input == None):
	print "Must specify an input file"
	exit()

data = scipy.genfromtxt( args.input, usecols=(0,1,2), unpack=True )

# set up the plot figure
if(args.nogui) and (args.figure):
	mpl.use( args.backend )

import matplotlib.pyplot as plot

a = plot.axes( [0.1,0.1,0.85,0.85] )
a.scatter( data[0], data[1], c='k', facecolors='none' )
a.plot( data[0], data[2], 'r-', linewidth=2 )
plot.title( args.title )
plot.xlabel( args.xLabel )
plot.xlim([min(data[0]),max(data[0])])
plot.ylabel( args.yLabel )

b = plot.axes([0.5,0.5,0.43,0.43])
b.plot( data[0], [0]*len(data[0]), 'r-', linewidth=2 )
b.scatter( data[0], data[1]-data[2], c='k', facecolors='none' )
plot.ylabel( r'$Y_{exp}-Y_{fit}$' )
plot.xlim([min(data[0]),max(data[0])])

for (arg,val) in args.plotArgs:
	mpl.rcParams[ arg ] = val

if(args.figure):
	print "Plotting figure \"%s\"" % args.figure
	plot.savefig( args.figure )

if(not args.nogui) or (not args.figure):
	plot.show()