#!/usr/bin/env python

import argparse
import glob
import os
import sys
import scipy

parser = argparse.ArgumentParser()

parser.add_argument('input',											metavar='component_statistics_*.tbl',	help='MESMER component statistics file')
parser.add_argument('-pdbs',	action='append',		default=[],		metavar='DIR',							help='Directory(s) containing named PDBs')
parser.add_argument('-Pmin',	type=float,				default=5,		metavar='5%',							help='Minimum prevalence for components to be included')
parser.add_argument('-Wmin',	type=float,				default=0.05,	metavar='0.05',							help='Minimum weighting for components to be included')
parser.add_argument('-out',								required=True,	metavar='*.pdb',						help='Filename to save output PDB under')
parser.add_argument('-wAttr',	action='store_true',	default=False,											help='Write UCSF Chimera attribute files for prevalence and weighting of each component')

args = parser.parse_args()

if( args.input == None ):
	print "ERROR: Must provide a component statistics file"
	sys.exit(1)

if( len(args.pdbs) < 1):
	print "ERROR: Must specify at least one directory containing PDBs"
	sys.exit(2)

for dir in args.pdbs:
	if( not os.path.isdir(dir) ):
		print "ERROR: -pdb option dir \"%s\" does not exist" % (dir)
		sys.exit(3)

if( os.path.exists(args.out) ):
	print "ERROR: Output pdb \"%s\" already exists" % (args.out)
	sys.exit(4)

try:
	f = open( args.input, 'r' )
	lines = f.readlines()[1:] # drop the header
	f.close()
except Exception as e:
	print "ERROR: Could not read -input option \"%s\": %s" % (args.input,e)
	sys.exit(5)

pdbs = []
component_p = []
component_w = []
for l in lines:
	fields = l.strip().split()

	if(len(fields)<4):
		continue

	if( float(fields[1]) < args.Pmin ):
		continue
	if( float(fields[3]) < args.Wmin ):
		continue

	print "\t%s\t%s\t%s" % (fields[0],fields[1],fields[3])

	path = None
	for d in args.pdbs:
		test = "%s%s%s.pdb" % (d,os.sep,fields[0])
		if( os.access( test, os.R_OK ) ):
			if( path != None ):
				print "ERROR: duplicate named PDB (\"%s\") found in directories \"%s\" and \"%s\"" % (fields[0],d,os.path.dirname(pdb))
				sys.exit(6)
			else:
				path = test

	if(path == None):
		print "ERROR: Could not find pdb \"%s\" in any of the provided directories" % (fields[0])
		sys.exit(7)

	pdbs.append( path )
	component_p.append( float(fields[1]) )
	component_w.append( float(fields[3]) )

if( len(pdbs) > 0 ):
	f = open( args.out, 'w' )
else:
	f = None
	print "ERROR: Could not open output file \"%s\"" % (args.out)
	sys.exit(8)

for (i,model) in enumerate(pdbs):
	try:
		f.write("MODEL        %d\n%s\nENDMDL\n" % (i+1, open(model, 'r').read().strip()) )
	except Exception as e:
		print "ERROR: Could not append PDB to output: %s" % (e)
		sys.exit(9)

if( f != None ):
	f.close()

def write_model_attributes( path, name, attributes ):
	f = open( path, 'w' )
	f.write("""# generated by make_generation_models
attribute: %s
match mode: 1-to-1
recipient: molecules
""" % name)
	for (i,a) in enumerate(attributes):
		f.write("\t#0.%i\t%.3f\n" % (i+1,a))
	f.close()

if( args.wAttr ):
	try:
		name = "%s_prevalence" % os.path.splitext(os.path.basename(args.out))[0]
		path = "%s_prevalence.attr" % os.path.splitext(args.out)[0]
		write_model_attributes( path, name, component_p )

		name = "%s_weights" % os.path.splitext(os.path.basename(args.out))[0]
		path = "%s_weights.attr" % os.path.splitext(args.out)[0]
		write_model_attributes( path, name, [100*w for w in component_w] )
	except Exception as e:
		print "ERROR: Could not write attribute lists: %s" % (e)