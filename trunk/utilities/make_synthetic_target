#!/usr/bin/env python

mesmer_path = "/Volumes/FosterLab/users/ihms/Projects/MESMER/mesmer2"

import argparse
import os
import scipy
import sys
import glob

sys.path.append(mesmer_path)
import lib.setup
import lib.plugin_functions
import lib.ga_objects_ensemble
import lib.ga_functions_output as output

parser = argparse.ArgumentParser()
parser.add_argument('-target',		action='append',	required=True,					metavar='FILE',		help='Target file to use as template')
parser.add_argument('-components',	action='append',	required=True,	nargs='*',		metavar='FILE/DIR',	help='MESMER component files or directory ')
parser.add_argument('-spec',							required=True,					metavar='SPEC',		help='The synthetic target specification file')
parser.add_argument('-dir',								default='./',					metavar='./',		help='Directory to write synthetic data to')
parser.add_argument('-dbm',			action='store_true',default=False,									help='Use a component database instead of maintaining in memory (much slower, significantly reduced memory footprint')
parser.add_argument('-plugin',		action='store',										metavar='NAME',	help='Print information about the specified plugin and exit.')

args = parser.parse_args()

# god help you if there's errors here - no checking!
plugins = lib.plugin_functions.load_plugins(args, '%s/plugins/' % os.path.realpath(mesmer_path))
targets = lib.setup.load_all_targets( args, plugins )
components = lib.setup.load_all_components( args, plugins, targets )

tmp = scipy.recfromtxt( args.spec, dtype=str, unpack=True )
n = len(tmp[0])
spec = [ list(tmp[0]), list(tmp[1]) ]

# make sure all the specified components are available, and get their weighting
for i in range(n):
	if( not spec[0][i] in components.keys() ):
		print "The specification component %s was not found in the provided components" % spec[0][i]
		exit()
	spec[1][i] = float(spec[1][i])

e = lib.ga_objects_ensemble.mesEnsemble( plugins, targets, n )
e.component_names = spec[0]
o = e.get_fitness(components, plugins, targets[0], spec[1])

print "Fits to provided target data:"
for k in o:
	print "\t%s : %.3f" % (k,o[k])

output.print_plugin_state( args, 0, plugins, targets, [e])

lib.plugin_functions.unload_plugins( plugins )